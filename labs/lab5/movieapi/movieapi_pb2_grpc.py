# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import movieapi_pb2 as movieapi__pb2


class MovieInfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMovieInfo = channel.unary_unary(
                '/movieapi.MovieInfo/GetMovieInfo',
                request_serializer=movieapi__pb2.MovieRequest.SerializeToString,
                response_deserializer=movieapi__pb2.MovieReply.FromString,
                )
        self.SetMovieInfo = channel.unary_unary(
                '/movieapi.MovieInfo/SetMovieInfo',
                request_serializer=movieapi__pb2.MovieData.SerializeToString,
                response_deserializer=movieapi__pb2.Status.FromString,
                )


class MovieInfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMovieInfo(self, request, context):
        """Sends a requeest for movie info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMovieInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMovieInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovieInfo,
                    request_deserializer=movieapi__pb2.MovieRequest.FromString,
                    response_serializer=movieapi__pb2.MovieReply.SerializeToString,
            ),
            'SetMovieInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMovieInfo,
                    request_deserializer=movieapi__pb2.MovieData.FromString,
                    response_serializer=movieapi__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'movieapi.MovieInfo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieInfo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMovieInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/movieapi.MovieInfo/GetMovieInfo',
            movieapi__pb2.MovieRequest.SerializeToString,
            movieapi__pb2.MovieReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMovieInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/movieapi.MovieInfo/SetMovieInfo',
            movieapi__pb2.MovieData.SerializeToString,
            movieapi__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
